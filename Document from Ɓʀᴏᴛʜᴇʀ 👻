<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infinite Flow Gradient Audio Player</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #FF5F6D, #FFC371, #6A82FB, #FC5C7D, #F7B7A3, #D4A5A5, #392F5A);
            background-size: 400% 400%;
            animation: gradientFlow 10s ease infinite;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            padding: 20px;
        }

        @keyframes gradientFlow {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        .audio-player {
            text-align: center;
            background: rgba(255, 255, 255, 0.7);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 500px;
            transition: transform 0.3s ease-in-out;
            animation: fadeIn 1s ease-in-out;
        }

        h1 {
            font-size: 28px;
            color: #333;
            margin-bottom: 20px;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-weight: 600;
        }

        input[type="file"] {
            padding: 12px;
            border: 2px solid #FFC371;
            border-radius: 5px;
            background-color: #FF5F6D;
            color: white;
            cursor: pointer;
            width: 100%;
            font-size: 16px;
            margin-bottom: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }

        input[type="file"]:hover {
            background-color: #FFC371;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
        }

        button {
            padding: 12px 20px;
            background-color: #6A82FB;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
            margin-top: 15px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        button:hover {
            background-color: #FC5C7D;
            transform: translateY(-3px);
        }

        #fileList {
            margin: 20px 0;
            max-height: 200px;
            overflow-y: scroll;
            padding: 10px;
            background-color: #f4f4f4;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        #fileList div {
            padding: 12px;
            cursor: pointer;
            border-radius: 8px;
            margin: 5px 0;
            transition: background-color 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        #fileList div:hover {
            background-color: #FF5F6D;
            color: white;
            transform: scale(1.03);
        }

        audio {
            margin-top: 20px;
            width: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

        .controls button {
            padding: 12px 18px;
            background-color: #FF5F6D;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .controls button:hover {
            background-color: #FFC371;
            transform: translateY(-3px);
        }

        @media (max-width: 768px) {
            .audio-player {
                max-width: 100%;
                padding: 15px;
            }

            h1 {
                font-size: 24px;
            }

            button {
                font-size: 16px;
                padding: 10px 18px;
            }

            input[type="file"] {
                font-size: 14px;
                padding: 10px;
            }
        }

        @keyframes fadeIn {
            0% {
                opacity: 0;
                transform: scale(0.5);
            }
            100% {
                opacity: 1;
                transform: scale(1);
            }
        }
    </style>
</head>
<body>
    <div class="audio-player">
        <h1>7 Color Flow Audio Player</h1>
        <input type="file" id="folderPath" webkitdirectory directory multiple />
        <button onclick="loadAudioFiles()">Load Audio Files</button>
        <div id="fileList"></div>
        <audio id="audio" controls>
            Your browser does not support the audio element.
        </audio>

        <div class="controls">
            <button onclick="prevTrack()">Previous</button>
            <button onclick="playPause()">Play</button>
            <button onclick="nextTrack()">Next</button>
            <button onclick="playAll()">Play All</button>
        </div>
    </div>

    <script>
        let audioFiles = [];
        let currentAudioIndex = 0;
        let isPlaying = false;

        function loadAudioFiles() {
            const folderInput = document.getElementById('folderPath');
            const fileListDiv = document.getElementById('fileList');
            const files = folderInput.files;

            if (files.length === 0) {
                alert("Please select a folder with audio files.");
                return;
            }

            fileListDiv.innerHTML = '';

            // Filter only audio files (e.g., .mp3, .wav)
            audioFiles = Array.from(files).filter(file => 
                file.name.endsWith('.mp3') || file.name.endsWith('.wav')
            );

            if (audioFiles.length === 0) {
                alert("No audio files found in the selected folder.");
                return;
            }

            // Display audio files
            audioFiles.forEach(file => {
                const fileItem = document.createElement('div');
                fileItem.textContent = file.name;
                fileItem.style.cursor = 'pointer';
                fileItem.addEventListener('click', () => {
                    currentAudioIndex = audioFiles.findIndex(f => f.name === file.name);
                    playAudio();
                });
                fileListDiv.appendChild(fileItem);
            });
        }

        function playAudio() {
            if (audioFiles.length === 0) return;

            const audio = document.getElementById('audio');
            const file = audioFiles[currentAudioIndex];

            const fileURL = URL.createObjectURL(file);
            audio.src = fileURL;
            audio.play();
            isPlaying = true;
            updatePlayButton();
        }

        function playPause() {
            const audio = document.getElementById('audio');
            if (isPlaying) {
                audio.pause();
                isPlaying = false;
            } else {
                playAudio();
            }
            updatePlayButton();
        }

        function nextTrack() {
            currentAudioIndex = (currentAudioIndex + 1) % audioFiles.length; // Loop back to the first audio after the last one
            playAudio();
        }

        function prevTrack() {
            currentAudioIndex = (currentAudioIndex - 1 + audioFiles.length) % audioFiles.length; // Loop to the last audio when at the first
            playAudio();
        }

        function playAll() {
            if (audioFiles.length === 0) return;

            const audio = document.getElementById('audio');
            const allFiles = audioFiles.map(file => URL.createObjectURL(file));

            let currentIndex = 0;
            audio.src = allFiles[currentIndex];
            audio.play();

            audio.addEventListener('ended', function() {
                currentIndex = (currentIndex + 1) % audioFiles.length;
                audio.src = allFiles[currentIndex];
                audio.play();
            });
        }

        // Event listener for when the audio ends, to play the next audio automatically
        document.getElementById('audio').addEventListener('ended', function() {
            if (!isPlaying) return;
            nextTrack();
        });

        function updatePlayButton() {
            const playButton = document.querySelector('.controls button:nth-child(2)');
            if (isPlaying) {
                playButton.textContent = 'Pause';
            } else {
                playButton.textContent = 'Play';
            }
        }

    </script>
</body>
</html>
